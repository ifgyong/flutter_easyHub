import 'package:flutter/material.dart';
import 'package:flutter_easyhub/mainHub.dart';
import 'easy_hub.dart';
import 'dart:async';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
      ),
      home: MainHub(
        child: MyHomePage(title: 'Flutter Demo Home Page'),
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List list = [
    'hide all',
    'default hub',
    'msg',
    'hub',
    'hub default',
    'msg Â§öË°å',
    'error hub',
    'complate hub',
    'line',
    'circle  easy out easy in',
    'circle  head to tail',
    'Áü©ÂΩ¢ÁøªËΩ¨ flipingRect',
    'ÂøÉË∑≥ beattingCircle ',
    'Âçï‰∏™ singlebeattingCircle',
    'Á´ñÊù° Ë∑≥Âä® beatingRects',
    'ÂúÜÂúàËøΩÈÄê rotatingCircles',
    'ÂúÜÂúàËøΩÈÄê rotatingDeformedCircles',
    'Ë∑≥Âä®ÁöÑÂúÜÂúà rotatingDeformedCirclesRow',
    'ËøΩÈÄêÁöÑÁü©ÂΩ¢ rotatingTwoRect',
    'ÂúÜÂúàËøΩÈÄê rotatingTwoCircles',
    'ÊäòÂè†Áü©ÂΩ¢ foldingRect',
    'ÊëÜÈíü',
    'Ê≥¢Êµ™',
    'Ê∞¥ÁêÉ',
    'Ê≠£Êñπ‰ΩìËß£‰ΩìÂêà‰ΩìüòØ',
    'ÊóãËΩ¨ÁöÑÈ≠îÁêÉ',
    'Ë∑≥Âä®ÁöÑÈ≠îÁêÉ',
    'Èó™ÁÉÅÁöÑ‰πùÈ•º',
    'ÊéâËêΩÁöÑÂ∞èÁêÉ',
    'Ê≤ôÊºè',
    'Ë∑≥Âä®Áü©ÂΩ¢',
    'Ê∏∏Ê≥≥ÁöÑÂ∞èÁêÉ',
    'Ë∑≥Âä®ÁöÑËô´Â≠ê',
    'Ë∑≥Âä®ÁöÑÂ∞èÁêÉ',
    'ÂÉè‰∏ãÈõ®ÁöÑÂ∞èÁêÉ',
    'ÁøªËΩ¨ÁöÑÁ∫øÊÄßËè±ÂΩ¢ ‰ªøÊñ∞ÁâàÂ§¥Êù°Âì¶'
  ];
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        child: getList(),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }

  Widget getList() {
    return new ListView.builder(
      itemBuilder: (BuildContext context, int index) {
        return GestureDetector(
            onTap: () {
              show(index);
            },
            child: Container(
              height: 45,
              margin: EdgeInsets.only(top: 5, bottom: 5, left: 20, right: 20),
              color: Colors.black12,
              alignment: Alignment.center,
              child: Text(
                '${list[index]} ,idex:${index - 1}',
                style: TextStyle(
                  fontSize: 15,
                ),
              ),
            ));
      },
      itemCount: list.length,
    );
  }

  Timer t;
  void show(int index) {
    Navigator.of(context).push(new MaterialPageRoute(
        builder: (context) => NewPage(
              title: 'title',
            )));
    Duration delay = const Duration(seconds: 2);
    switch (index - 1) {
      case -1:
        EasyHub.dismiddAll();
        break;
      case 0:

//        EasyHub.getInstance.indicatorType =
//            EasyHubIndicatorType.EasyHubIndicator_default;
//        EasyHub.getInstance.setParameter(
//          background: Colors.black12,
//        );
//        EasyHub.show(context, 'Â§öË°å\nfgyong\nËÄÅÂ∏à');
        break;
      case 1:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_default;
        EasyHub.getInstance.setParameter(background: Colors.black12);

        EasyHub.showMsg(context, 'ÂçïË°åÂì¶ loading', delayHidenDurtion: delay);
        break;
      case 2:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_default;
        EasyHub.getInstance.setParameter(background: Colors.white);

        EasyHub.showHub(context);
        break;
      case 3:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_CircularProgress;
        EasyHub.getInstance.setParameter(
            background: Colors.black38,
            circlebackgroundColor: Colors.white.withOpacity(0.5),
            circleValueColor: new AlwaysStoppedAnimation(Colors.white));

        EasyHub.show(context, 'Âä†ËΩΩ‰∏≠„ÄÇ„ÄÇ');
        break;
      case 4:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_CircularProgress;
        EasyHub.getInstance.setParameter(background: Colors.black38);

        EasyHub.showMsg(
            context,
            'fgyong blog'
            'ÂÖ¨‰ºóÂè∑ÔºöfgyongÁöÑÂºÄÂèëÊó•ËÆ∞ ÂÖ¨‰ºóÂè∑ÔºöfgyongÁöÑÂºÄÂèëÊó•ËÆ∞ ÂÖ¨‰ºóÂè∑ÔºöfgyongÁöÑÂºÄÂèëÊó•ËÆ∞'
            'ÂÖ¨‰ºóÂè∑ÔºöfgyongÁöÑÂºÄÂèëÊó•ËÆ∞ ÂÖ¨‰ºóÂè∑ÔºöfgyongÁöÑÂºÄÂèëÊó•ËÆ∞ ÂÖ¨‰ºóÂè∑ÔºöfgyongÁöÑÂºÄÂèëÊó•ËÆ∞');
        break;
      case 5:
        EasyHub.getInstance.setParameter(background: Colors.black38);
        EasyHub.getInstance.textStyle = TextStyle(
            fontSize: 15, color: Colors.white, decoration: TextDecoration.none);
        EasyHub.showErrorHub(context, 'ÁΩëÁªúÈîôËØØ');
        break;
      case 6:
        EasyHub.getInstance.setParameter(background: Colors.black38);
        EasyHub.showComplateHub(context, '‰∏ãËΩΩÂÆåÊàê');

        break;
      case 7:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_LineProgress;

        EasyHub.getInstance.setParameter(
            circleValueColor: new AlwaysStoppedAnimation(Colors.white),
            circlebackgroundColor: Colors.black38,
            background: Colors.black38);
        EasyHub.show(context, 'Ê≠£Âú®‰∏ãËΩΩ„ÄÇ„ÄÇ„ÄÇ');

        break;
      case 8:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_CircularProgressEasyOutEasyIn;

        EasyHub.getInstance.setParameter(
            circleValueColor: new AlwaysStoppedAnimation(Colors.white),
            circlebackgroundColor: Color.fromRGBO(180, 180, 180, 1));
        EasyHub.showHub(context);
        break;

      case 9:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_CircularProgressEasy;
        EasyHub.getInstance.setParameter(
            circleValueColor: new AlwaysStoppedAnimation(Colors.lightBlue),
            circlebackgroundColor: Colors.white);

        EasyHub.showHub(context);
        break;

      case 10:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_singleFlipingRect;
        EasyHub.getInstance.setParameter(
            circleValueColor: new AlwaysStoppedAnimation(Colors.lightBlue),
            circlebackgroundColor: Colors.white,
            background: Color.fromRGBO(0, 0, 0, 0));

        EasyHub.showHub(context);
        break;
      //EasyHubIndicator_circleBeat
      case 11:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_beattingCircle;
        EasyHub.getInstance.setParameter(
            circleValueColor:
                new AlwaysStoppedAnimation(Color.fromRGBO(1, 52, 255, 0.5)),
            circlebackgroundColor: Colors.white,
            background: Color.fromRGBO(0, 0, 0, 0));

        EasyHub.showHub(
          context,
        );
        break;
      case 12:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_singlebeattingCircle;
        EasyHub.getInstance.setParameter(
            circleValueColor:
                new AlwaysStoppedAnimation(Colors.orange.withOpacity(0.7)),
            circlebackgroundColor: Colors.orangeAccent,
            background: Color.fromRGBO(0, 0, 0, 0));
        EasyHub.showHub(context);
        break;
      case 13:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_beatingRects;
        EasyHub.getInstance.setParameter(
            circleValueColor:
                new AlwaysStoppedAnimation(Colors.lightBlueAccent),
            circlebackgroundColor: Colors.orangeAccent,
            background: Color.fromRGBO(0, 0, 0, 0));
        EasyHub.showHub(context);
        break;
      case 14:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_rotatingCircles;
        EasyHub.getInstance.setParameter(
            circleValueColor:
                new AlwaysStoppedAnimation(Colors.lightBlueAccent),
            circlebackgroundColor: Colors.orangeAccent,
            background: Color.fromRGBO(0, 0, 0, 0));
        EasyHub.showHub(context);
        break;
      case 15:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_rotatingDeformedCircles;
        EasyHub.getInstance.setParameter(
            circleValueColor: new AlwaysStoppedAnimation(Colors.pinkAccent),
            background: Color.fromRGBO(0, 0, 0, 0));
        EasyHub.showHub(context);
        break;
      case 16:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_rotatingDeformedCirclesRow;
        EasyHub.getInstance.setParameter(
            circleValueColor: new AlwaysStoppedAnimation(Colors.orangeAccent),
            background: Color.fromRGBO(0, 0, 0, 0));
        EasyHub.showHub(context);
        break;
      case 17:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_rotatingTwoRect;
        EasyHub.getInstance.setParameter(
            circleValueColor:
                new AlwaysStoppedAnimation(Colors.lightBlueAccent),
            background: Color.fromRGBO(0, 0, 0, 0));
        EasyHub.showHub(context);
        break;
      case 18:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_rotatingTwoCircles;
        EasyHub.getInstance.setParameter(
            circleValueColor:
                new AlwaysStoppedAnimation(Colors.lightBlueAccent),
            background: Color.fromRGBO(0, 0, 0, 0));
        EasyHub.showHub(context);
        break;
      case 19:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_foldingRect;
        EasyHub.getInstance.setParameter(
            circleValueColor:
                new AlwaysStoppedAnimation(Colors.lightBlueAccent),
            background: Color.fromRGBO(0, 0, 0, 0));
        EasyHub.showHub(context);
        break;
      case 20:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_pendulumingBall;
        EasyHub.getInstance.setParameter(
            circleValueColor:
                new AlwaysStoppedAnimation(Colors.lightBlueAccent),
            background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 21:
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_waves;
        EasyHub.getInstance.setParameter(
            circleValueColor: new AlwaysStoppedAnimation(Colors.lightBlue),
            background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 22: //üíß
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_spitBubbles;
        EasyHub.getInstance.setParameter(
            circleValueColor: new AlwaysStoppedAnimation(Colors.lightBlue),
            background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 23: //üíß
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_movingCube;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 24: //ÊóãËΩ¨ÁöÑÈ≠îÁêÉ
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_rotatingTwoColorBall;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 25: //Ë∑≥Âä®ÁöÑÈ≠îÁêÉ
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_dancingBalls;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 26: //Ë∑≥Âä®ÁöÑ‰πùÈ•º
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_flashingBalls;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 27: //ÊéâËêΩÁöÑÂ∞èÁêÉ
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_fallingBall;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 28: //ÊéâËêΩÁöÑÂ∞èÁêÉ
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_hourglass;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 29: //Áü©ÂΩ¢Âä†ÈÄüÂáèÈÄü
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_dancingCube;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 30: //Áü©ÂΩ¢Âä†ÈÄüÂáèÈÄü
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_swingingBall;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 31: //Áü©ÂΩ¢Âä†ÈÄüÂáèÈÄü
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_creepingBug;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 32: //Ë∑≥Áª≥Â∞èÁêÉ
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_rubberBand;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 33: //‰∏ãÈõ®
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_rainCouplet;
        EasyHub.getInstance.setParameter(
            circleValueColor: null, background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
      case 34: //‰∏ãÈõ®
        EasyHub.getInstance.indicatorType =
            EasyHubIndicatorType.EasyHubIndicator_flipDiamond;
        EasyHub.getInstance.setParameter(
            circleValueColor: const AlwaysStoppedAnimation(Colors.red),
            background: Color.fromRGBO(0, 0, 1, 0));
        EasyHub.showHub(context);
        break;
    }

    Future.delayed(Duration(seconds: 25)).then((v) {
//      EasyHub.dismiddAll();
//      Navigator.of(context).pop();
    });
  }

  double v = 0;
}

class NewPage extends StatefulWidget {
  NewPage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _NewPage createState() => _NewPage();
}

class _NewPage extends State<NewPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: WillPopScope(
          child: Container(
            color: Colors.white,
          ),
          // ignore: missing_return
          onWillPop: () async {
            EasyHub.dismiddAll();
            return true;
          }),
    );
  }
}
